@startuml VinylShop_Component_Flow_Diagram
!theme hacker
title VinylShop - Component Flow Diagram

package "Client Layer" {
    [Web Browser] as Browser
}

package "Network Layer" {
    [HTTP Request] as Request
    [HTTP Response] as Response
}

package "Django Server" {
    
    package "Web Server Layer" {
        [Django Web Server] as WebServer
    }
    
    package "URL Routing Layer" {
        [Main URLconf] as MainRouter
        [Home URLs] as HomeRouter
        [Vinyl URLs] as VinylRouter
        [Cart URLs] as CartRouter
        [Accounts URLs] as AccountsRouter
        [Wishlist URLs] as WishlistRouter
    }
    
    package "Views Layer" {
        [Home Views] as HomeViews
        [Vinyl Views] as VinylViews
        [Cart Views] as CartViews
        [Accounts Views] as AccountsViews
        [Wishlist Views] as WishlistViews
    }
    
    package "Models Layer" {
        [Vinyl Record Model] as VinylModel
        [User Model] as UserModel
        [Order Model] as OrderModel
        [Item Model] as ItemModel
        [Review Model] as ReviewModel
        [Wishlist Model] as WishlistModel
    }
    
    package "Database Layer" {
        [Database] as Database
    }
    
    package "Template Layer" {
        [HTML Templates] as Templates
        [CSS Files] as Styles
        [JavaScript Files] as Scripts
    }
    
    package "Static Files" {
        [Album Cover Images] as AlbumCovers
        [Audio Samples] as AudioFiles
        [Static Assets] as StaticFiles
    }
}

' Request Flow - Customer browsing vinyl records
Browser --> Request : "1. Browse Vinyl"
Request --> WebServer : "2. HTTP Request"
WebServer --> MainRouter : "3. Route Request"
MainRouter --> VinylRouter : "4. Delegate to Vinyl App"
VinylRouter --> VinylViews : "5. Call Vinyl View"

VinylViews --> VinylModel : "6. Query Vinyl Records"
VinylModel --> Database : "7. SQL Query"
Database --> VinylModel : "8. Return Records"
VinylModel --> VinylViews : "9. Vinyl Data"

VinylViews --> Templates : "10. Render Template"
Templates --> Styles : "11. Apply Vinyl Theme CSS"
Templates --> AlbumCovers : "12. Include Album Art"
Templates --> AudioFiles : "13. Add Audio Samples"

' Response Flow
Templates --> VinylViews : "14. HTML Response"
VinylViews --> Response : "15. HTTP Response"
Response --> Browser : "16. Display Vinyl Collection"

' Component Connections
MainRouter --> HomeRouter
MainRouter --> VinylRouter
MainRouter --> CartRouter
MainRouter --> AccountsRouter
MainRouter --> WishlistRouter

HomeRouter --> HomeViews
VinylRouter --> VinylViews
CartRouter --> CartViews
AccountsRouter --> AccountsViews
WishlistRouter --> WishlistViews

' Model connections
VinylViews --> VinylModel
VinylViews --> ReviewModel
CartViews --> OrderModel
CartViews --> ItemModel
CartViews --> VinylModel
AccountsViews --> UserModel
WishlistViews --> WishlistModel
WishlistViews --> VinylModel

' Database connections
VinylModel --> Database
UserModel --> Database
OrderModel --> Database
ItemModel --> Database
ReviewModel --> Database
WishlistModel --> Database

' Additional vinyl-specific flows
note right of VinylModel
    Contains:
    - Album Title
    - Artist Name
    - Release Year
    - Genre
    - Price
    - Condition (New/Used)
    - Pressing Details
    - Label Information
    - Stock Quantity
end note

note right of AudioFiles
    Features:
    - 30-second previews
    - High-quality samples
    - Multiple formats
end note

note right of AlbumCovers
    Vinyl-specific:
    - High-resolution artwork
    - Front and back covers
    - Liner notes images
end note

note right of ItemModel
    Inventory Management:
    - Vinyl Record ID
    - Order ID
    - Quantity in Cart
    - Price at Purchase
    - Stock Status
    - Available Quantity
end note

@enduml
